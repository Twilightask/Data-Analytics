USE WORLD_LAYOFFS;

-- Step 1: Import and backup the data
SELECT * FROM LAYOFFS;

-- Step 2: Create a backup table for cleaning
CREATE TABLE LAYOFFS_STAGING LIKE LAYOFFS;
INSERT INTO LAYOFFS_STAGING SELECT * FROM LAYOFFS;

-- Step 3: Identify duplicates using CTE and ROW_NUMBER()
WITH DUPLICATE_CTE AS (
    SELECT *, 
    ROW_NUMBER() OVER(PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, `DATE`, 
    STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ROW_NUM
    FROM LAYOFFS_STAGING
)
SELECT * FROM DUPLICATE_CTE WHERE ROW_NUM > 1;

-- Step 4: Verify duplicate detection
SELECT * FROM LAYOFFS_STAGING WHERE COMPANY = '&OPEN';

-- Step 5: Attempt to delete duplicates (CTE cannot be updated)
DELETE FROM DUPLICATE_CTE WHERE ROW_NUM > 1;

-- Step 6: Create a new table to store cleaned data
CREATE TABLE layoffs_staging2 (
    company TEXT,
    location TEXT,
    industry TEXT,
    total_laid_off INT DEFAULT NULL,
    percentage_laid_off TEXT,
    `date` TEXT,
    stage TEXT,
    country TEXT,
    funds_raised_millions INT DEFAULT NULL,
    ROW_NUM INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

-- Step 7: Insert data with ROW_NUM for duplicate identification
INSERT INTO layoffs_staging2
SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY, LOCATION, INDUSTRY, TOTAL_LAID_OFF, PERCENTAGE_LAID_OFF, `DATE`, 
STAGE, COUNTRY, FUNDS_RAISED_MILLIONS) AS ROW_NUM
FROM LAYOFFS_STAGING;

-- Step 8: Delete duplicate rows from LAYOFFS_STAGING2
DELETE FROM layoffs_staging2 WHERE ROW_NUM > 1;

-- Step 9: Standardizing the data
-- Trim spaces from company names
UPDATE LAYOFFS_STAGING2 SET COMPANY = TRIM(COMPANY);

-- Clean country data
UPDATE LAYOFFS_STAGING2 SET COUNTRY = REPLACE(COUNTRY, '.', '');
UPDATE LAYOFFS_STAGING2 SET COUNTRY = TRIM(COUNTRY);

-- Standardize industry names
UPDATE LAYOFFS_STAGING2 SET INDUSTRY = 'Crypto' WHERE INDUSTRY LIKE 'CRYPTO%';

-- Step 10: Convert date formats
SELECT `DATE`, STR_TO_DATE(`DATE`, '%m/%d/%Y') FROM LAYOFFS_STAGING2;
UPDATE LAYOFFS_STAGING2 SET `DATE` = STR_TO_DATE(`DATE`, '%m/%d/%Y');

-- Modify date column to proper DATE type
ALTER TABLE LAYOFFS_STAGING2 MODIFY COLUMN `DATE` DATE;

-- Step 11: Handle null and blank values
-- Identify null or blank rows for cleanup
SELECT * FROM LAYOFFS_STAGING2 WHERE INDUSTRY IS NULL OR INDUSTRY = '';
SELECT * FROM LAYOFFS_STAGING2 WHERE TOTAL_LAID_OFF IS NULL OR TOTAL_LAID_OFF = '';
SELECT * FROM LAYOFFS_STAGING2 WHERE PERCENTAGE_LAID_OFF IS NULL OR PERCENTAGE_LAID_OFF = '';

-- Delete rows with both TOTAL_LAID_OFF and PERCENTAGE_LAID_OFF null or blank
DELETE FROM LAYOFFS_STAGING2 WHERE (TOTAL_LAID_OFF IS NULL OR TOTAL_LAID_OFF = '') AND (PERCENTAGE_LAID_OFF IS NULL OR PERCENTAGE_LAID_OFF = '');

-- Step 12: Drop temporary ROW_NUM column
ALTER TABLE LAYOFFS_STAGING2 DROP COLUMN ROW_NUM;

-- Step 13: Handle blank industries by matching rows with the same company and location
UPDATE LAYOFFS_STAGING2 STG0
JOIN LAYOFFS_STAGING2 STG2 ON STG0.COMPANY = STG2.COMPANY
AND STG0.LOCATION = STG2.LOCATION
SET STG0.INDUSTRY = STG2.INDUSTRY
WHERE STG0.INDUSTRY IS NULL AND STG2.INDUSTRY IS NOT NULL;

-- Step 14: Final clean-up
UPDATE LAYOFFS_STAGING2 SET INDUSTRY = 'Gambling Facilities and Casinos' WHERE INDUSTRY IS NULL;

-- Final table review
SELECT * FROM LAYOFFS_STAGING2;




